name: Build Image

on:
  release:
    types: [published]
  push:

jobs:
  information:
    name: ℹ️ Gather add-on information
    runs-on: ubuntu-latest
    outputs:
      name: ${{ steps.basic.outputs.name }}
      image: ${{ steps.basic.outputs.image }}
      description: ${{ steps.basic.outputs.description }}
      ext_release: ${{ steps.basic.outputs.ext_release }}
      ext_release_clean: ${{ steps.basic.outputs.ext_release_clean }}
      architectures: ${{ steps.architectures.outputs.architectures }}   
      version: ${{ steps.release.outputs.version }}
    steps:
      - name: ⤵️ Check out code from GitHub
        uses: actions/checkout@v4
      
      - name: ℹ️ Find config file
        id: find
        run: |
          echo "config=config.yaml" >> $GITHUB_OUTPUT

      - name: ℹ️ Extract basic image information
        shell: bash
        id: basic
        run: | 
          name=$(yq --no-colors eval '.name' "${{ steps.find.outputs.config }}")
          echo "name=${name}" >> "$GITHUB_OUTPUT"
  
          description=$(yq --no-colors eval '.description' "${{ steps.find.outputs.config }}")
          echo "description=${description}" >> "$GITHUB_OUTPUT"
  
          image=$(yq --no-colors eval '.image // ""' "${{ steps.find.outputs.config }}")
          echo "image=${image}" >> "$GITHUB_OUTPUT"

          ext_release=$(yq --no-colors eval '.ext_release' "${{ steps.find.outputs.config }}")
          echo "ext_release=${ext_release}" >> "$GITHUB_OUTPUT"

          echo "ext_release_clean=$(echo $ext_release | sed 's/[~,%@+;:/]//g')" >> "$GITHUB_OUTPUT"
  
      - name: ℹ️ Extract add-on architecture information
        shell: bash
        id: architectures
        run: |
          architectures=$(
            yq --no-colors --output-format json  eval '.arch' "${{ steps.find.outputs.config }}" \
              | jq --raw-output --compact-output '. | sort'
          )
          echo "architectures=${architectures}" >> "$GITHUB_OUTPUT"
  
          for architecture in \
            aarch64 \
            amd64 \
            armhf \
            armv7 \
            i386;
          do
            available=$(
              yq --no-colors eval \
                ".arch[] | select(. == \"${architecture}\") | . or false" \
                "${{ steps.find.outputs.config }}"
            )
            echo "${architecture}=${available}" >> "$GITHUB_OUTPUT"
          done   

      - name: ℹ️ Gather version
        id: release
        run: |
          version="${sha:0:7}"
          if [[ "${{ github.event_name }}" = "release" ]]; then
            version="${{ github.event.release.tag_name }}"
            version="${version,,}"
            version="${version#v}"
          fi
          echo "version=${version}" >> "$GITHUB_OUTPUT"

  build:
    name: 👷 Build & Deploy ${{ matrix.architecture }}
    needs: information
    runs-on: ubuntu-latest
    strategy:
      matrix:
        architecture: ${{ fromJson(needs.information.outputs.architectures) }}
    outputs:
      build_date: ${{ steps.flags.outputs.date }}
    steps:
      - name: ⤵️ Check out code from GitHub
        uses: actions/checkout@v4

      - name: ℹ️ Compose build flags
        id: flags
        run: |
          echo "date=$(date +"%Y-%m-%dT%H:%M:%SZ")" >> "$GITHUB_OUTPUT"

          if [[ "${{ matrix.architecture }}" = "amd64" || "${{ matrix.architecture }}" = "x86_64" ]]; then
            echo "platform=linux/amd64" >> "$GITHUB_OUTPUT"
          elif [[ "${{ matrix.architecture }}" = "i386" ]]; then
            echo "platform=linux/386" >> "$GITHUB_OUTPUT"
          elif [[ "${{ matrix.architecture }}" = "armhf" ]]; then
            echo "platform=linux/arm/v6" >> "$GITHUB_OUTPUT"
          elif [[ "${{ matrix.architecture }}" = "armv7" ]]; then
            echo "platform=linux/arm/v7" >> "$GITHUB_OUTPUT"
          elif [[ "${{ matrix.architecture }}" = "aarch64" ]]; then
            echo "platform=linux/arm64/v8" >> "$GITHUB_OUTPUT"
          else
            echo "::error ::Could not determine platform for architecture ${{ matrix.architecture }}"
            exit 1
          fi

      - name: 🏗 Restore build cache
        id: cache
        uses: actions/cache/restore@v3.3.2
        with:
          path: /tmp/.docker-cache
          key: docker-${{ matrix.architecture }}-${{ github.sha }}
          restore-keys: |
            docker-${{ matrix.architecture }}   

      - name: 🏗 Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: 🏗 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          platforms: ${{ steps.flags.outputs.platform }}

      - name: 🏗 Login to Github Container Repo
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: 🚀 Calculate image labels and tags
        id: meta
        uses: docker/metadata-action@v5
        with:
          # list of Docker images to use as base name for tags
          images: |
             ghcr.io/${{ github.repository_owner }}/${{ needs.information.outputs.image }}            
          # generate Docker tags based on the following events/attributes
          flavor:
            prefix=${{ matrix.architecture }}-
          tags: |
            type=sha,prefix=${{ matrix.architecture }}-
            type=raw,value=${{ needs.information.outputs.ext_release_clean }}
            type=raw,value=latest,enable={{is_default_branch}}
            type=semver,pattern=v{{version}}
            type=semver,pattern=v{{major}},enable=${{ !startsWith(github.ref, 'refs/tags/v0.') }}
            type=semver,pattern=v{{major}}.{{minor}}
            type=semver,pattern=v{{version}},prefix=${{ matrix.architecture }}-${{ needs.information.outputs.ext_release_clean }}-
          labels: |
            org.opencontainers.image.created=${{ steps.flags.outputs.date }}
            org.opencontainers.image.authors=Carlos Sanchez
            org.opencontainers.image.url=https://github.com/${{ github.repository_owner }}/${{ github.repository }}/packages
            org.opencontainers.image.documentation=https://docs.linuxserver.io/images/docker-baseimage-alpine
            org.opencontainers.image.source=https://github.com/${{ github.repository_owner }}/${{ github.repository }}
            org.opencontainers.image.version=${{ needs.information.outputs.version }}
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.vendor=Carlos Sanchez
            org.opencontainers.image.licenses=GPL-3.0-only
            org.opencontainers.image.ref.name=${{ github.sha }}
            org.opencontainers.image.title=${{ needs.information.outputs.name }}
            org.opencontainers.image.description=${{ needs.information.outputs.description }} 

      - name: 🚀 Build and push
        id: build-and-push
        uses: docker/build-push-action@v5
        with:
          # Not possible to load and push at the same time
          push: ${{ github.event_name == 'release' }}
          load: ${{ github.event_name != 'release' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: |
            type=local,src=/tmp/.docker-cache
            ghcr.io/${{ github.repository_owner }}/${{ needs.information.outputs.image }}
          cache-to: type=local,mode=max,dest=/tmp/.docker-cache-new          
          platforms: ${{ steps.flags.outputs.platform }}
          provenance: false
          build-args: |
            BUILD_ARCH=${{ matrix.architecture }}
            BUILD_DATE=${{ steps.flags.outputs.date }}
            BUILD_EXT_RELEASE=${{ needs.information.outputs.ext_release }}
            BUILD_VERSION=${{ needs.information.outputs.version }}

      # This ugly bit is necessary, or our cache will grow forever...
      # Well until we hit GitHub's limit of 5GB :)
      # https://github.com/docker/build-push-action/issues/252
      # https://github.com/moby/buildkit/issues/1896
      - name: 🚚 Swap build cache
        if: ${{ github.event_name != 'release' }}
        run: |
          rm -rf /tmp/.docker-cache
          mv /tmp/.docker-cache-new /tmp/.docker-cache

      - name: 🏗 Save build cache
        # On release push no cache is created
        if: ${{ github.event_name != 'release' }}
        uses: actions/cache/save@v3.3.2
        with:
          path: /tmp/.docker-cache
          key: docker-${{ matrix.architecture }}-${{ github.sha }}

  publish:
    name: 👷 Publish manifest
    runs-on: ubuntu-latest
    needs:
      - information
      - build
    if: ${{ github.event_name == 'release' }}
    steps:
      - name: 🏗 Login to Github Container Repo
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: 🚀 Calculate manifest image labels and tags
        id: meta
        uses: docker/metadata-action@v5
        with:
          # list of Docker images to use as base name for tags
          images: |
             ghcr.io/${{ github.repository_owner }}/${{ needs.information.outputs.image }}            
          # generate Docker tags based on the following events/attributes
          tags: |
            type=sha
            type=raw,value=latest,enable={{is_default_branch}}
            type=raw,value=${{ needs.information.outputs.ext_release_clean }}
            type=semver,pattern=v{{version}}
            type=semver,pattern=v{{major}},enable=${{ !startsWith(github.ref, 'refs/tags/v0.') }}
            type=semver,pattern=v{{major}}.{{minor}}
            type=semver,pattern=v{{version}},prefix=${{ needs.information.outputs.ext_release_clean }}-
      
      - name: 🚀 Calculate source images and output tags
        id: source
        run: |
          images=$(echo '${{ needs.information.outputs.architectures }}' | jq -c -r 'map("ghcr.io/${{ github.repository_owner }}/${{ needs.information.outputs.image }}:\(.)-${{ needs.information.outputs.ext_release_clean }}") |  join(",")')
          echo "images=$images" >> $GITHUB_OUTPUT
          tags=$(echo '${{ steps.meta.outputs.tags }}' | paste -sd,)
          echo "tags=$tags" >> $GITHUB_OUTPUT

      - name: 🚀 Create and push manifest images
        uses: Noelware/docker-manifest-action@0.4.0
        with:
            inputs: ${{ steps.source.outputs.tags }}
            images: ${{ steps.source.outputs.images }}
            push: true